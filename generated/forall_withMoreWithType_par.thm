Specification "forall_withMoreWithType_par". 

Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := {error E} ;
	 progresses E := exists E', {step E E'}.

Theorem Error-types-all: forall E T1 T2, {typeOf E T1} -> {error E} -> {typeOf E T2}.
 skip. 

Theorem Canonical-form-arrow: forall e, forall T1, forall T2, {typeOf e (arrow T1 T2)} -> {value e} -> exists T1, exists R2, e = (abs T1 R2). 
intros Main ValHyp.  case Main.  search.        Mapp: case ValHyp.  MappT: case ValHyp.  Mhead: case ValHyp.   Mif: case ValHyp.  Mfix: case ValHyp.  Mlet: case ValHyp.  Mletrec: case ValHyp.  Mtry: case ValHyp.  Mraise: case ValHyp. 


Theorem Canonical-form-all: forall e, forall T1, {typeOf e (all T1)} -> {value e} -> exists R1, e = (absT R1). 
intros Main ValHyp.  case Main.   search.       Mapp: case ValHyp.  MappT: case ValHyp.  Mhead: case ValHyp.   Mif: case ValHyp.  Mfix: case ValHyp.  Mlet: case ValHyp.  Mletrec: case ValHyp.  Mtry: case ValHyp.  Mraise: case ValHyp. 


Theorem Canonical-form-list: forall e, forall T1, {typeOf e (list T1)} -> {value e} -> e = (emptyList) \/ exists V1, exists V2, e = (cons V1 V2) /\ {value V1} /\ {value V2}. 
intros Main ValHyp.  case Main.    search.  Mcons: case ValHyp.  search.     Mapp: case ValHyp.  MappT: case ValHyp.  Mhead: case ValHyp.  Mtail: case ValHyp.  Mif: case ValHyp.  Mfix: case ValHyp.  Mlet: case ValHyp.  Mletrec: case ValHyp.  Mtry: case ValHyp.  Mraise: case ValHyp. 


Theorem Canonical-form-excType: forall e, {typeOf e (excType)} -> {value e} -> e = (excValue). 
intros Main ValHyp.  case Main.      search.    Mapp: case ValHyp.  MappT: case ValHyp.  Mhead: case ValHyp.   Mif: case ValHyp.  Mfix: case ValHyp.  Mlet: case ValHyp.  Mletrec: case ValHyp.  Mtry: case ValHyp.  Mraise: case ValHyp. 


Theorem Canonical-form-bool: forall e, {typeOf e (bool)} -> {value e} -> e = (tt) \/ e = (ff). 
intros Main ValHyp.  case Main.       search.  search.  Mapp: case ValHyp.  MappT: case ValHyp.  Mhead: case ValHyp.   Mif: case ValHyp.  Mfix: case ValHyp.  Mlet: case ValHyp.  Mletrec: case ValHyp.  Mtry: case ValHyp.  Mraise: case ValHyp. 


Theorem Progress-abs: forall ty, forall T1, forall E2, {typeOf (abs T1 E2) ty} -> true -> progresses (abs T1 E2). 
intros Main.  search.  


Theorem Progress-absT: forall ty, forall E1, {typeOf (absT E1) ty} -> true -> progresses (absT E1). 
intros Main.  search.  


Theorem Progress-emptyList: forall ty, {typeOf (emptyList) ty} -> true -> progresses (emptyList). 
intros Main.  search.  


Theorem Progress-cons: forall ty, forall E1, forall E2, {typeOf (cons E1 E2) ty} -> progresses E1 -> progresses E2 -> progresses (cons E1 E2). 
intros Main Prgs0 Prgs1.  ProgressHyp0: case Prgs0.  ProgressHyp1: case Prgs1.  search.  search.  search.  search.  search. 


Theorem Progress-excValue: forall ty, {typeOf (excValue) ty} -> true -> progresses (excValue). 
intros Main.  search.  


Theorem Progress-tt: forall ty, {typeOf (tt) ty} -> true -> progresses (tt). 
intros Main.  search.  


Theorem Progress-ff: forall ty, {typeOf (ff) ty} -> true -> progresses (ff). 
intros Main.  search.  


Theorem Progress-app: forall ty, forall E1, forall E2, {typeOf (app E1 E2) ty} -> progresses E1 -> progresses E2 -> progresses (app E1 E2). 
intros Main Prgs0 Prgs1.  ProgressHyp0: case Prgs0.  ProgressHyp1: case Prgs1.  Typing0: case Main.  Canonical: apply Canonical-form-arrow to Typing0 ProgressHyp0.  search.  search.  search.  search.  search. 


Theorem Progress-appT: forall ty, forall E1, forall T2, {typeOf (appT E1 T2) ty} -> progresses E1 -> progresses (appT E1 T2). 
intros Main Prgs0.  ProgressHyp0: case Prgs0.  Typing0: case Main.  Canonical: apply Canonical-form-all to Typing0 ProgressHyp0.  search.  search.  search. 


Theorem Progress-head: forall ty, forall E1, {typeOf (head E1) ty} -> progresses E1 -> progresses (head E1). 
intros Main Prgs0.  ProgressHyp0: case Prgs0.  Typing0: case Main.  Canonical: apply Canonical-form-list to Typing0 ProgressHyp0.  case Canonical.  search.  search.  search.  search. 


Theorem Progress-tail: forall ty, forall E1, {typeOf (tail E1) ty} -> progresses E1 -> progresses (tail E1). 
intros Main Prgs0.  ProgressHyp0: case Prgs0.  Typing0: case Main.  Canonical: apply Canonical-form-list to Typing0 ProgressHyp0.  case Canonical.  search.  search.  search.  search. 


Theorem Progress-if: forall ty, forall E1, forall E2, forall E3, {typeOf (if E1 E2 E3) ty} -> progresses E1 -> progresses (if E1 E2 E3). 
intros Main Prgs0.  ProgressHyp0: case Prgs0.  Typing0: case Main.  Canonical: apply Canonical-form-bool to Typing0 ProgressHyp0.  case Canonical.  search.  search.  search.  search. 


Theorem Progress-fix: forall ty, forall E1, {typeOf (fix E1) ty} -> progresses E1 -> progresses (fix E1). 
intros Main Prgs0.  ProgressHyp0: case Prgs0.  search.  search.  search. 


Theorem Progress-let: forall ty, forall E1, forall E2, {typeOf (let E1 E2) ty} -> progresses E1 -> progresses (let E1 E2). 
intros Main Prgs0.  ProgressHyp0: case Prgs0.  search.  search.  search. 


Theorem Progress-letrec: forall ty, forall T1, forall E2, forall E3, {typeOf (letrec T1 E2 E3) ty} -> true -> progresses (letrec T1 E2 E3). 
intros Main.  search.  


Theorem Progress-try: forall ty, forall E1, forall E2, {typeOf (try E1 E2) ty} -> progresses E1 -> progresses (try E1 E2). 
intros Main Prgs0.  ProgressHyp0: case Prgs0.  search.  case ProgressHyp0.  search.  search.  


Theorem Progress-raise: forall ty, forall E1, {typeOf (raise E1) ty} -> progresses E1 -> progresses (raise E1). 
intros Main Prgs0.  ProgressHyp0: case Prgs0.  search.  search.  search. 


Theorem Progress-thm: forall e, forall typ, {typeOf e typ} -> progresses e. 
IH0 : induction on 1. intros Main. Typing0: case Main.  backchain Progress-abs.  backchain Progress-absT.  backchain Progress-emptyList.  apply IH0 to Typing0.  apply IH0 to Typing1.  backchain Progress-cons.  backchain Progress-excValue.  backchain Progress-tt.  backchain Progress-ff.  apply IH0 to Typing0.  apply IH0 to Typing1.  backchain Progress-app.  apply IH0 to Typing0.  backchain Progress-appT.  apply IH0 to Typing0.  backchain Progress-head.  apply IH0 to Typing0.  backchain Progress-tail.  apply IH0 to Typing0.  backchain Progress-if.  apply IH0 to Typing0.  backchain Progress-fix.  apply IH0 to Typing0.  backchain Progress-let.  backchain Progress-letrec.  apply IH0 to Typing0.  backchain Progress-try.  apply IH0 to Typing0.  backchain Progress-raise. 


Theorem Type-preservation: forall e1, forall e2, forall typ, {typeOf e1 typ} -> {step e1 e2} -> {typeOf e2 typ}. 
IH0 : induction on 1. intros Main Step. Typing0: case Main.  Mabs: case Step.   MabsT: case Step.   MemptyList: case Step.   Mcons: case Step.  apply IH0 to Typing0 Mcons.  search.  apply IH0 to Typing1 Mcons.  search.  backchain Error-types-all.  backchain Error-types-all.  MexcValue: case Step.   Mtt: case Step.   Mff: case Step.   Mapp: case Step.  skip.  apply IH0 to Typing0 Mapp.  search.  apply IH0 to Typing1 Mapp.  search.  backchain Error-types-all.  backchain Error-types-all.  MappT: case Step.  skip.  apply IH0 to Typing0 MappT.  search.  backchain Error-types-all.  Mhead: case Step.  case Typing0.  search.  case Typing0.  search.  apply IH0 to Typing0 Mhead.  search.  backchain Error-types-all.  Mtail: case Step.  case Typing0.  search.  case Typing0.  search.  apply IH0 to Typing0 Mtail.  search.  backchain Error-types-all.  Mif: case Step.  case Typing0.  search.  case Typing0.  search.  apply IH0 to Typing0 Mif.  search.  backchain Error-types-all.  Mfix: case Step.  search.  apply IH0 to Typing0 Mfix.  search.  backchain Error-types-all.  Mlet: case Step.  skip.  apply IH0 to Typing0 Mlet.  search.  backchain Error-types-all.  Mletrec: case Step.  search.   Mtry: case Step.  search.  case Typing0.  search.  apply IH0 to Typing0 Mtry.  search.   Mraise: case Step.  apply IH0 to Typing0 Mraise.  search.  backchain Error-types-all. 



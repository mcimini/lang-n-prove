Specification "foralll". 

Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := {error E} ;
	 progresses E := exists E', {step E E'}.

Theorem Error-types-all: forall E T1 T2, {typeOf E T1} -> {error E} -> {typeOf E T2}.
 intros Hyp1 Error. case Error. case Hyp1. search. 

Theorem Canonical-form-all: forall e, forall T1, {typeOf e (all T1)} -> {value e} -> exists R1, e = (absT R1). 
intros Main ValHyp.  case Main.  search.  MappT: case ValHyp. 


Theorem Progress-absT: forall ty, forall E1, {typeOf (absT E1) ty} -> true -> progresses (absT E1). 
intros Main.  search.  


Theorem Progress-appT: forall ty, forall E1, forall T2, {typeOf (appT E1 T2) ty} -> progresses E1 -> progresses (appT E1 T2). 
intros Main Prgs0.  ProgressHyp0: case Prgs0.  Typing0: case Main.  Canonical: apply Canonical-form-all to Typing0 ProgressHyp0.  search.  search.  search. 


Theorem Progress-thm: forall e, forall typ, {typeOf e typ} -> progresses e. 
IH0 : induction on 1. intros Main. Typing0: case Main.  backchain Progress-absT.  apply IH0 to Typing0.  backchain Progress-appT. 


Theorem Type-preservation: forall e1, forall e2, forall typ, {typeOf e1 typ} -> {step e1 e2} -> {typeOf e2 typ}. 
IH0 : induction on 1. intros Main Step. Typing0: case Main.  MabsT: case Step.   MappT: case Step.  skip.  apply IH0 to Typing0 MappT.  search.  backchain Error-types-all. 



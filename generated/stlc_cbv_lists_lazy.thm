Specification "stlc_cbv_lists_lazy". 

Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := {error E} ;
	 progresses E := exists E', {step E E'}.

Theorem Error-types-all: forall E T1 T2, {typeOf E T1} -> {error E} -> {typeOf E T2}.
 intros Hyp1 Error. case Error. case Hyp1. search. 

Theorem Canonical-form-arrow: forall e, forall T1, forall T2, {typeOf e (arrow T1 T2)} -> {value e} -> exists T1, exists R2, e = (abs T1 R2). 
intros Main ValHyp.  case Main.  search.    Mapp: case ValHyp.  Mhead: case ValHyp.   MmyError: case ValHyp. 


Theorem Canonical-form-list: forall e, forall T1, {typeOf e (list T1)} -> {value e} -> e = (emptyList) \/ exists E1, exists E2, e = (cons E1 E2). 
intros Main ValHyp.  case Main.   search.  search.  Mapp: case ValHyp.  Mhead: case ValHyp.  Mtail: case ValHyp.  MmyError: case ValHyp. 


Theorem Progress-abs: forall ty, forall T1, forall E2, {typeOf (abs T1 E2) ty} -> true -> progresses (abs T1 E2). 
intros Main.  search.  


Theorem Progress-emptyList: forall ty, {typeOf (emptyList) ty} -> true -> progresses (emptyList). 
intros Main.  search.  


Theorem Progress-cons: forall ty, forall E1, forall E2, {typeOf (cons E1 E2) ty} -> true -> progresses (cons E1 E2). 
intros Main.  search.  


Theorem Progress-app: forall ty, forall E1, forall E2, {typeOf (app E1 E2) ty} -> progresses E1 -> progresses E2 -> progresses (app E1 E2). 
intros Main Prgs0 Prgs1.  ProgressHyp0: case Prgs0.  ProgressHyp1: case Prgs1.  Typing0: case Main.  Canonical: apply Canonical-form-arrow to Typing0 ProgressHyp0.  search.  search.  search.  search.  search. 


Theorem Progress-head: forall ty, forall E1, {typeOf (head E1) ty} -> progresses E1 -> progresses (head E1). 
intros Main Prgs0.  ProgressHyp0: case Prgs0.  Typing0: case Main.  Canonical: apply Canonical-form-list to Typing0 ProgressHyp0.  case Canonical.  search.  search.  search.  search. 


Theorem Progress-tail: forall ty, forall E1, {typeOf (tail E1) ty} -> progresses E1 -> progresses (tail E1). 
intros Main Prgs0.  ProgressHyp0: case Prgs0.  Typing0: case Main.  Canonical: apply Canonical-form-list to Typing0 ProgressHyp0.  case Canonical.  search.  search.  search.  search. 


Theorem Progress-myError: forall ty, {typeOf (myError) ty} -> true -> progresses (myError). 
intros Main.  search.  


Theorem Progress-thm: forall e, forall typ, {typeOf e typ} -> progresses e. 
IH0 : induction on 1. intros Main. Typing0: case Main.  backchain Progress-abs.  backchain Progress-emptyList.  backchain Progress-cons.  apply IH0 to Typing0.  apply IH0 to Typing1.  backchain Progress-app.  apply IH0 to Typing0.  backchain Progress-head.  apply IH0 to Typing0.  backchain Progress-tail.  backchain Progress-myError. 


Theorem Type-preservation: forall e1, forall e2, forall typ, {typeOf e1 typ} -> {step e1 e2} -> {typeOf e2 typ}. 
IH0 : induction on 1. intros Main Step. Typing0: case Main.  Mabs: case Step.   MemptyList: case Step.   Mcons: case Step.   Mapp: case Step.  skip.  apply IH0 to Typing0 Mapp.  search.  apply IH0 to Typing1 Mapp.  search.  backchain Error-types-all.  backchain Error-types-all.  Mhead: case Step.  case Typing0.  search.  case Typing0.  search.  apply IH0 to Typing0 Mhead.  search.  backchain Error-types-all.  Mtail: case Step.  case Typing0.  search.  case Typing0.  search.  apply IH0 to Typing0 Mtail.  search.  backchain Error-types-all.  MmyError: case Step.  



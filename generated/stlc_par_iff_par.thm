Specification "stlc_par_iff_par". 

Define progresses : term -> prop by
	 progresses E := {value E} ;
	 progresses E := {error E} ;
	 progresses E := exists E', {step E E'}.

Theorem Error-types-all: forall E T1 T2, {typeOf E T1} -> {error E} -> {typeOf E T2}.
 intros Hyp1 Error. case Error. 

Theorem Canonical-form-arrow: forall e, forall T1, forall T2, {typeOf e (arrow T1 T2)} -> {value e} -> exists T1, exists R2, e = (abs T1 R2). 
intros Main ValHyp.  case Main.  search.    Mapp: case ValHyp.  Mif: case ValHyp. 


Theorem Canonical-form-bool: forall e, {typeOf e (bool)} -> {value e} -> e = (tt) \/ e = (ff). 
intros Main ValHyp.  case Main.   search.  search.  Mapp: case ValHyp.  Mif: case ValHyp. 


Theorem Progress-abs: forall ty, forall T1, forall E2, {typeOf (abs T1 E2) ty} -> true -> progresses (abs T1 E2). 
intros Main.  search.  


Theorem Progress-tt: forall ty, {typeOf (tt) ty} -> true -> progresses (tt). 
intros Main.  search.  


Theorem Progress-ff: forall ty, {typeOf (ff) ty} -> true -> progresses (ff). 
intros Main.  search.  


Theorem Progress-app: forall ty, forall E1, forall E2, {typeOf (app E1 E2) ty} -> progresses E1 -> progresses E2 -> progresses (app E1 E2). 
intros Main Prgs0 Prgs1.  ProgressHyp0: case Prgs0.  ProgressHyp1: case Prgs1.  Typing0: case Main.  Canonical: apply Canonical-form-arrow to Typing0 ProgressHyp0.  search.  search.  search.  search.  search. 


Theorem Progress-if: forall ty, forall E1, forall E2, forall E3, {typeOf (if E1 E2 E3) ty} -> progresses E1 -> progresses E2 -> progresses E3 -> progresses (if E1 E2 E3). 
intros Main Prgs0 Prgs1 Prgs2.  ProgressHyp0: case Prgs0.  ProgressHyp1: case Prgs1.  ProgressHyp2: case Prgs2.  Typing0: case Main.  Canonical: apply Canonical-form-bool to Typing0 ProgressHyp0.  case Canonical.  search.  search.  search.  search.  search.  search.  search.  search. 


Theorem Progress-thm: forall e, forall typ, {typeOf e typ} -> progresses e. 
IH0 : induction on 1. intros Main. Typing0: case Main.  backchain Progress-abs.  backchain Progress-tt.  backchain Progress-ff.  apply IH0 to Typing0.  apply IH0 to Typing1.  backchain Progress-app.  apply IH0 to Typing0.  apply IH0 to Typing1.  apply IH0 to Typing2.  backchain Progress-if. 


Theorem Type-preservation: forall e1, forall e2, forall typ, {typeOf e1 typ} -> {step e1 e2} -> {typeOf e2 typ}. 
IH0 : induction on 1. intros Main Step. Typing0: case Main.  Mabs: case Step.   Mtt: case Step.   Mff: case Step.   Mapp: case Step.  skip.  apply IH0 to Typing0 Mapp.  search.  apply IH0 to Typing1 Mapp.  search.  backchain Error-types-all.  backchain Error-types-all.  Mif: case Step.  case Typing0.  search.  case Typing0.  search.  apply IH0 to Typing0 Mif.  search.  apply IH0 to Typing1 Mif.  search.  apply IH0 to Typing2 Mif.  search.  backchain Error-types-all.  backchain Error-types-all.  backchain Error-types-all. 



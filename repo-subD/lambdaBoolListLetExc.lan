Top ::= (top).
Subtyping S ::= (arrow Contra Cov) | (bool) | (list Cov) .
Expression E ::= x | (abs T (x)E) | (tt ) | (ff ) | (emptyList ) | (cons E E) | (app E E) | (if E E E) | (head E) | (tail E) | (let E (x)E) | (try E E) | (raise E).
Type T ::= (top) | (arrow T T) | (bool ) | (list T) .
Value V ::= (abs T1 R2) | (tt ) | (ff ) | (emptyList ) | (cons V1 V2) .
Error ::= (raise V1).
Context C ::= [] | (cons C e) | (cons v C) | (app C e) | (app v C) | (if C e e) | (head C) | (tail C) | (let C e) | (try C e) | (raise C).

Gamma |- (abs T1 R) : (arrow T1 T2) <== Gamma, x : T1 |- R : T2.

Gamma |- (tt ) : (bool ).

Gamma |- (ff ) : (bool ).

Gamma |- (emptyList ) : (list T).

Gamma |- (cons E1 E2) : (list T) <== Gamma |- E1 : T /\ Gamma |- E2 : (list T).

Gamma |- (absT R2) : (all R) <== Gamma, X |- R2 : R.

Gamma |- (app E1 E2) : T2 <== Gamma |- E1 : (arrow T1 T2) /\ Gamma |- E2 : T1.

(app (abs T R) V) --> R[V/x] <== value V.

Gamma |- (if E1 E2 E3) : T <== Gamma |- E1 : (bool ) /\ Gamma |- E2 : T /\ Gamma |- E3 : T.

(if (tt ) E1 E2) --> E1.

(if (ff ) E1 E2) --> E2.

Gamma |- (head E) : T <== Gamma |- E : (list T).

(head (emptyList )) --> (raise (tt )).

(head (cons E1 E2)) --> E1.

Gamma |- (tail E) : (list T) <== Gamma |- E : (list T).

(tail (emptyList )) --> (raise (ff )).

(tail (cons E1 E2)) --> E2.

Gamma |- (let E R) : T2 <== Gamma |- E : T1 /\ Gamma, x : T1 |- R : T2.

(let V R) --> R[V/x] <== value V.

Gamma |- (try E1 E2) : T <== Gamma |- E1 : T /\ Gamma |- E2 : (arrow (bool ) T).

(try E1 E2) --> E1 <== value E1.

(try (raise E1) E2) --> (app E2 E1).

Gamma |- (raise E1) : T <== Gamma |- E1 : (bool ).



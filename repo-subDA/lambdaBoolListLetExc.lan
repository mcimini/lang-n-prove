Top ::= (top ).
Subtyping S ::= (arrow Contra Cov) | (bool ) | (list Cov).
Expression E ::= x | (abs T (x)E) | (tt ) | (ff ) | (emptyList ) | (cons E E) | (app E E) | (if E E E) | (head E) | (tail E) | (let E (x)E) | (try E E) | (raise E).
Type T ::= (top ) | (arrow T T) | (bool ) | (list T).
Value V ::= (abs T1 R2) | (tt ) | (ff ) | (emptyList ) | (cons V1 V2).
Error ::= (raise V1).
Context C ::= [] | (cons C e) | (cons v C) | (app C e) | (app v C) | (if C e e) | (head C) | (tail C) | (let C e) | (try C e) | (raise C).

Gamma |- (abs T1 R) : (arrow T1 T2) <== Gamma, x : T1 |- R : T2.
Gamma |- (tt ) : (bool ).
Gamma |- (ff ) : (bool ).
Gamma |- (emptyList ) : (list T).
Gamma |- (cons E1 E2) : (list T) <== Gamma |- E1 : T /\ Gamma |- E2 : (list T).
Gamma |- (app E1 E2) : T2 <== Gamma |- E1 : (arrow T1 T2) /\ Gamma |- E2 : T1.
Gamma |- (if E1 E2 E3) : T <== Gamma |- E1 : (bool ) /\ Gamma |- E2 : T /\ Gamma |- E3 : T.
Gamma |- (head E) : T <== Gamma |- E : (list T).
Gamma |- (tail E) : (list T) <== Gamma |- E : (list T).
Gamma |- (let E R) : T2 <== Gamma |- E : T1 /\ Gamma, x : T1 |- R : T2.
Gamma |- (try E1 E2) : T <== Gamma |- E1 : T /\ Gamma |- E2 : (arrow (bool ) T).
Gamma |- (raise E1) : T <== Gamma |- E1 : (bool ).
Gamma |a- (abs T1 R) : (arrow T1 T2) <== Gamma, x : T1 |a- R : T2.
Gamma |a- (tt ) : (bool ).
Gamma |a- (ff ) : (bool ).
Gamma |a- (emptyList ) : (list T).
Gamma |a- (cons E1 E2) : (list T3) <== Gamma |a- E1 : T1 /\ Gamma |a- E2 : (list T2) /\ join T1 T2 T3.
Gamma |a- (app E1 E2) : T2 <== Gamma |a- E1 : (arrow T1 T2) /\ Gamma |a- E2 : T3 /\ T3 <a T1.
Gamma |a- (if E1 E2 E3) : T3 <== Gamma |a- E1 : (bool ) /\ Gamma |a- E2 : T1 /\ Gamma |a- E3 : T2 /\ join T1 T2 T3.
Gamma |a- (head E) : T <== Gamma |a- E : (list T).
Gamma |a- (tail E) : (list T) <== Gamma |a- E : (list T).
Gamma |a- (let E R) : T2 <== Gamma |a- E : T1 /\ Gamma, x : T3 |a- R : T2  /\ T1 <a T3.
Gamma |a- (try E1 E2) : T3 <== Gamma |a- E1 : T1 /\ Gamma |a- E2 : (arrow T4 T2) /\ join T1 T2 T3 /\ (bool) <a T4.
Gamma |a- (raise E1) : T <== Gamma |a- E1 : (bool ).
(top ) <a (top ).
(arrow T1 T2) <a (arrow T1' T2') <== T1' <a T1 /\ T2 <a T2'.
(arrow T1 T2) <a (top ).
(bool ) <a (bool ).
(bool ) <a (top ).
(list T1) <a (list T1') <== T1 <a T1'.
(list T1) <a (top ).
join (top ) T (top ).
join (arrow T1 T2) (arrow T3 T4) (arrow T5 T6) <== meet T1 T3 T5 /\ join T2 T4 T6.
join (arrow T1 T2) T (top ).
join (bool ) (bool ) (bool ).
join (bool ) T (top ).
join (list T1) (list T3) (list T5) <== join T1 T3 T5.
join (list T1) T (top ).
meet (top ) (top ) (top ).
meet (top ) (arrow T1 T2) (arrow T1 T2).
meet (top ) (bool ) (bool ).
meet (top ) (list T1) (list T1).
meet (arrow T1 T2) (arrow T3 T4) (arrow T5 T6) <== join T1 T3 T5 /\ meet T2 T4 T6.
meet (arrow T1 T2) (top ) (arrow T1 T2).
meet (bool ) (bool ) (bool ).
meet (bool ) (top ) (bool ).
meet (list T1) (list T3) (list T5) <== meet T1 T3 T5.
meet (list T1) (top ) (list T1).
(app (abs T R) V) --> R[V/x] <== value V.
(if (tt ) E1 E2) --> E1.
(if (ff ) E1 E2) --> E2.
(head (emptyList )) --> (raise (tt )).
(head (cons E1 E2)) --> E1.
(tail (emptyList )) --> (raise (ff )).
(tail (cons E1 E2)) --> E2.
(let V R) --> R[V/x] <== value V.
(try E1 E2) --> E1 <== value E1.
(try (raise E1) E2) --> (app E2 E1).

Top ::= (top ).
Subtyping S ::= (arrow Contra Cov).
Expression E ::= x | (abs T (x)E) | (app E E) | (let E (x)E).
Type T ::= (top ) | (arrow T T).
Value V ::= (abs T1 R2).
Error ::= .
Context C ::= [] | (app C e) | (let C e).

Gamma |- (abs T1 R) : (arrow T1 T2) <== Gamma, x : T1 |- R : T2.
Gamma |- (app E1 E2) : T2 <== Gamma |- E1 : (arrow T1 T2) /\ Gamma |- E2 : T1.
Gamma |- (let E R) : T2 <== Gamma |- E : T1 /\ Gamma, x : T1 |- R : T2.
Gamma |a- (abs T1 R) : (arrow T1 T2) <== Gamma, x : T1 |a- R : T2.
Gamma |a- (app E1 E2) : T2 <== Gamma |a- E1 : (arrow T1 T2) /\ Gamma |a- E2 : T3 /\ T3 <a T1.
Gamma |a- (let E R) : T2 <== Gamma |a- E : T1 /\ Gamma, x : T3 |a- R : T2  /\ T1 <a T3.
(top ) <a (top ).
(arrow T1 T2) <a (arrow T1' T2') <== T1' <a T1 /\ T2 <a T2'.
(arrow T1 T2) <a (top ).
join (top ) T (top ).
join (arrow T1 T2) (arrow T3 T4) (arrow T5 T6) <== meet T1 T3 T5 /\ join T2 T4 T6.
join (arrow T1 T2) T (top ).
meet (top ) (top ) (top ).
meet (top ) (arrow T1 T2) (arrow T1 T2).
meet (arrow T1 T2) (arrow T3 T4) (arrow T5 T6) <== join T1 T3 T5 /\ meet T2 T4 T6.
meet (arrow T1 T2) (top ) (arrow T1 T2).
(app (abs T R) E) --> R[E/x].
(let V R) --> R[V/x] <== value V.

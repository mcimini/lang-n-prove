Top ::= (top ).
Subtyping S ::= (arrow Contra Cov).
Expression E ::= x | (abs (x)E) | (app E E) | (fix E) | (letrec (x)E (x)E).
Type T ::= (top ) | (arrow T T).
Value V ::= (abs R1).
Error ::= .
Context C ::= [] | (app C e) | (fix C).

Gamma |- (abs R) : (arrow T1 T2) <== Gamma, x : T1 |- R : T2.
Gamma |- (app E1 E2) : T2 <== Gamma |- E1 : (arrow T1 T2) /\ Gamma |- E2 : T1.
Gamma |- (fix E) : T <== Gamma |- E : (arrow T T).
Gamma |- (letrec R1 R2) : T2 <== Gamma, x : T1 |- R1 : T1 /\ Gamma, x : T1 |- R2 : T2.
Gamma |a- (abs R) : (arrow T1 T2) <== Gamma, x : T1 |a- R : T2.
Gamma |a- (app E1 E2) : T2 <== Gamma |a- E1 : (arrow T1 T2) /\ Gamma |a- E2 : T3 /\ T3 <a T1.
Gamma |a- (fix E) : T2 <== Gamma |a- E : (arrow T1 T2) /\ T2 <a T1.
Gamma |a- (letrec R1 R2) : T3 <== Gamma, x : T1 |a- R1 : T2 /\ Gamma, x : T1 |a- R2 : T3 /\ T2 <a T1.
(top ) <a (top ).
(arrow T1 T2) <a (arrow T1' T2') <== T1' <a T1 /\ T2 <a T2'.
(arrow T1 T2) <a (top ).
join (top ) T (top ).
join (arrow T1 T2) (arrow T3 T4) (arrow T5 T6) <== meet T1 T3 T5 /\ join T2 T4 T6.
join (arrow T1 T2) T (top ).
meet (top ) (top ) (top ).
meet (top ) (arrow T1 T2) (arrow T1 T2).
meet (arrow T1 T2) (arrow T3 T4) (arrow T5 T6) <== join T1 T3 T5 /\ meet T2 T4 T6.
meet (arrow T1 T2) (top ) (arrow T1 T2).
(app (abs R) EE) --> R[EE/x].
(fix V) --> (app V (fix V)) <== value V.
(letrec R1 R2) --> R2[(fix (abs R1))/x].

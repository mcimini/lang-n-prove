Top ::= (top ).
Subtyping S ::= (list Cov) | (bool ).
Expression E ::= x | (emptyList ) | (cons E E) | (tt ) | (ff ) | (head E) | (tail E) | (isnil E) | (if E E E) | (myError ).
Type T ::= (top ) | (list T) | (bool ).
Value V ::= (emptyList ) | (cons V1 V2) | (tt ) | (ff ).
Error ::= (myError ).
Context C ::= [] | (cons C v) | (cons e C) | (head C) | (tail C) | (isnil C) | (if C e e).

Gamma |- (emptyList ) : (list T).
Gamma |- (cons E1 E2) : (list T) <== Gamma |- E1 : T /\ Gamma |- E2 : (list T).
Gamma |- (tt ) : (bool ).
Gamma |- (ff ) : (bool ).
Gamma |- (head E) : T <== Gamma |- E : (list T).
Gamma |- (tail E) : (list T) <== Gamma |- E : (list T).
Gamma |- (isnil E) : (bool ) <== Gamma |- E : (list T).
Gamma |- (if E1 E2 E3) : T <== Gamma |- E1 : (bool ) /\ Gamma |- E2 : T /\ Gamma |- E3 : T.
Gamma |- (myError ) : T.
Gamma |a- (emptyList ) : (list T).
Gamma |a- (cons E1 E2) : (list T3) <== Gamma |a- E1 : T1 /\ Gamma |a- E2 : (list T2) /\ join T1 T2 T3.
Gamma |a- (tt ) : (bool ).
Gamma |a- (ff ) : (bool ).
Gamma |a- (head E) : T <== Gamma |a- E : (list T).
Gamma |a- (tail E) : (list T) <== Gamma |a- E : (list T).
Gamma |a- (isnil E) : (bool ) <== Gamma |a- E : (list T).
Gamma |a- (if E1 E2 E3) : T3 <== Gamma |a- E1 : (bool ) /\ Gamma |a- E2 : T1 /\ Gamma |a- E3 : T2 /\ join T1 T2 T3.
Gamma |a- (myError ) : T.
(top ) <a (top ).
(list T1) <a (list T1') <== T1 <a T1'.
(list T1) <a (top ).
(bool ) <a (bool ).
(bool ) <a (top ).
join (top ) T (top ).
join (list T1) (list T3) (list T5) <== join T1 T3 T5.
join (list T1) T (top ).
join (bool ) (bool ) (bool ).
join (bool ) T (top ).
meet (top ) (top ) (top ).
meet (top ) (list T1) (list T1).
meet (top ) (bool ) (bool ).
meet (list T1) (list T3) (list T5) <== meet T1 T3 T5.
meet (list T1) (top ) (list T1).
meet (bool ) (bool ) (bool ).
meet (bool ) (top ) (bool ).
(head (emptyList )) --> (myError ).
(head (cons E1 E2)) --> E1.
(tail (emptyList )) --> (myError ).
(tail (cons E1 E2)) --> E2.
(isnil (emptyList )) --> (tt ).
(isnil (cons E1 E2)) --> (ff ).
(if (tt ) E1 E2) --> E1.
(if (ff ) E1 E2) --> E2.

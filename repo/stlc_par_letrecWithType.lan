Expression E ::= x | (abs T (x)E) | (app E E) | (fix E) | (let E (x)E) | (letrec T (x)E (x)E)
Type T ::= (arrow T T)
Value V ::= (abs T1 R2)
Error ::= 
Context C ::= [] | (app C e) | (app e C) | (fix C) | (let C e)

Gamma |- (abs T1 R) : (arrow T1 T2) <== Gamma, x : T1 |- R : T2.

Gamma |- (app E1 E2) : T2 <== Gamma |- E1 : (arrow T1 T2) /\ Gamma |- E2 : T1.

(app (abs T R) E) --> R[E/x].

Gamma |- (fix E) : T <== Gamma |- E : (arrow T T).

(fix V) --> (app V (fix V)) <== value V.

Gamma |- (let E R) : T2 <== Gamma |- E : T1 /\ Gamma, x : T1 |- R : T2.

(let V R) --> R[V/x] <== value V.

Gamma |- (letrec T1 R1 R2) : T2 <== Gamma, x : T1 |- R1 : T1 /\ Gamma, x : T1 |- R2 : T2.

(letrec T R1 R2) --> (let (fix (abs T R1)) R2).



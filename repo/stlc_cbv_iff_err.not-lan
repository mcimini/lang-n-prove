Expression E ::= x | (abs T (x)E) | (tt ) | (ff ) | (app E E) | (if E E E) | (raise E)
Type T ::=  (bool ) | (arrow T T)
Value V ::= (abs T1 R2) | (tt ) | (ff )
Error ::= (raise E)
Context C ::= [] | (app C e) | (app v C) | (if C e e) | (raise C)
Subtyping S ::= (arrow Contra Cov) | (bool)

Gamma |- (abs T1 R) : (arrow T1 T2) <== Gamma, x : T1 |- R : T2.

Gamma |- (tt ) : (bool ).

Gamma |- (ff ) : (bool ).

Gamma |- (app E1 E2) : T2 <== Gamma |- E1 : (arrow T1 T2) /\ Gamma |- E2 : T1.

(app (abs T R) V) --> R[V/x] <== value V.

Gamma |- (if E1 E2 E3) : T <== Gamma |- E1 : (bool ) /\ Gamma |- E2 : T /\ Gamma |- E3 : T.

(if (tt ) E1 E2) --> E1.

(if (ff ) E1 E2) --> E2.

Gamma |- (raise E1) : T <== Gamma |- E1 : (bool ).

(bool) <a (bool).

(arrow T1 T2) <a (arrow T1' T2') <== T1' <a T1 /\ T2 <a T2'.

Gamma |a- (abs T1 R) : (arrow T1 T2) <== Gamma, x : T1 |a- R : T2.

Gamma |a- (tt ) : (bool ).

Gamma |a- (ff ) : (bool ).

Gamma |a- (app E1 E2) : T2 <== Gamma |a- E1 : (arrow T1 T2) /\ Gamma |a- E2 : T3 /\ T3 <a T1.

Gamma |a- (if E1 E2 E3) : T3 <== Gamma |a- E1 : (bool ) /\ Gamma |a- E2 : T1 /\ Gamma |a- E3 : T2 /\ join T1 T2 T3.

Gamma |a- (raise E1) : T <== Gamma |a- E1 : (bool ).

join (bool) (bool) (bool).

join (arrow T1 T2) (arrow T3 T4) (arrow T5 T6) <== meet T1 T3 T5 /\ join T2 T4 T6.

meet (bool) (bool) (bool).

meet (arrow T1 T2) (arrow T3 T4) (arrow T5 T6) <== join T1 T3 T5 /\ meet T2 T4 T6.
